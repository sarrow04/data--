# -*- coding: utf-8 -*-
"""feature_engineering_app

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1BieOy5ivxrM6RQsSPRK9IPwk0URt6gPw
"""

import streamlit as st
import pandas as pd

# --- ページ設定 ---
st.set_page_config(layout="wide")
st.title("データ結合 & 特徴量エンジニアリング ツール 🔧")

# --- Session Stateの初期化 ---
if 'df1' not in st.session_state: st.session_state.df1 = None
if 'df2' not in st.session_state: st.session_state.df2 = None
if 'merged_df' not in st.session_state: st.session_state.merged_df = None

# --- サイドバー ---
with st.sidebar:
    st.header("1. データのアップロード")

    uploaded_file1 = st.file_uploader("左のデータ（df1）をアップロード", type=["csv"])
    if uploaded_file1:
        st.session_state.df1 = pd.read_csv(uploaded_file1)

    uploaded_file2 = st.file_uploader("右のデータ（df2）をアップロード", type=["csv"])
    if uploaded_file2:
        st.session_state.df2 = pd.read_csv(uploaded_file2)

# --- メイン画面 ---
if st.session_state.df1 is not None and st.session_state.df2 is not None:
    df1 = st.session_state.df1
    df2 = st.session_state.df2

    st.header("2. データの結合")

    # 結合前のデータプレビュー
    col1, col2 = st.columns(2)
    with col1:
        st.write("左のデータ（df1）プレビュー")
        st.dataframe(df1.head())
    with col2:
        st.write("右のデータ（df2）プレビュー")
        st.dataframe(df2.head())

    merge_type = st.radio("結合の種類を選択してください", ("横に結合 (Join)", "縦に結合 (Concatenate)"))

    if merge_type == "横に結合 (Join)":
        st.subheader("横に結合 (Join) の設定")
        col1, col2, col3 = st.columns(3)
        with col1:
            left_on = st.selectbox("左のデータの共通列 (キー)", df1.columns)
        with col2:
            right_on = st.selectbox("右のデータの共通列 (キー)", df2.columns)
        with col3:
            how = st.selectbox("結合方法", ["inner", "left", "right", "outer"])

        if st.button("結合を実行"):
            try:
                merged_df = pd.merge(df1, df2, left_on=left_on, right_on=right_on, how=how)
                st.session_state.merged_df = merged_df
                st.success("データの結合に成功しました！")
            except Exception as e:
                st.error(f"結合中にエラーが発生しました: {e}")

    else: # 縦に結合
        st.subheader("縦に結合 (Concatenate)")
        st.info("2つのデータの列名と順序が同じ場合に最も効果的です。")
        if st.button("結合を実行"):
            try:
                merged_df = pd.concat([df1, df2], ignore_index=True)
                st.session_state.merged_df = merged_df
                st.success("データの結合に成功しました！")
            except Exception as e:
                st.error(f"結合中にエラーが発生しました: {e}")

# --- 結合後の処理 ---
if st.session_state.merged_df is not None:
    merged_df = st.session_state.merged_df

    st.header("3. 結合後データと特徴量エンジニアリング")
    st.dataframe(merged_df.head())

    st.subheader("特徴量エンジニアリング ツール")

    # --- 数値データ同士の計算 ---
    with st.expander("数値データ同士で新しい特徴量を作成"):
        numeric_cols = merged_df.select_dtypes(include=np.number).columns.tolist()
        col1, col2, col3 = st.columns(3)
        with col1:
            num_col1 = st.selectbox("一つ目の列", numeric_cols, key="nc1")
        with col2:
            operator = st.selectbox("計算方法", ["+", "-", "*", "/"])
        with col3:
            num_col2 = st.selectbox("二つ目の列", numeric_cols, key="nc2")
        new_col_name_calc = st.text_input("新しい列の名前", f"{num_col1}_{operator}_{num_col2}")
        if st.button("計算して列を追加"):
            try:
                merged_df[new_col_name_calc] = eval(f"merged_df['{num_col1}'] {operator} merged_df['{num_col2}']")
                st.session_state.merged_df = merged_df
                st.success(f"新しい列「{new_col_name_calc}」を追加しました。")
                st.rerun()
            except Exception as e:
                st.error(f"計算中にエラーが発生しました: {e}")

    # --- 日付データからの特徴量作成 ---
    with st.expander("日付データから新しい特徴量を作成"):
        # 日付に変換できそうな列を自動で探す
        potential_date_cols = [col for col in merged_df.columns if merged_df[col].astype(str).str.match(r'\d{4}[/-]\d{1,2}[/-]\d{1,2}').any()]
        date_col = st.selectbox("日付データが含まれる列", potential_date_cols)
        if date_col:
            features_to_extract = st.multiselect("抽出したい要素", ["年", "月", "日", "曜日"])
            if st.button("日付から特徴量を抽出"):
                try:
                    dt_series = pd.to_datetime(merged_df[date_col])
                    if "年" in features_to_extract: merged_df[f'{date_col}_年'] = dt_series.dt.year
                    if "月" in features_to_extract: merged_df[f'{date_col}_月'] = dt_series.dt.month
                    if "日" in features_to_extract: merged_df[f'{date_col}_日'] = dt_series.dt.day
                    if "曜日" in features_to_extract: merged_df[f'{date_col}_曜日'] = dt_series.dt.day_name()
                    st.session_state.merged_df = merged_df
                    st.success(f"日付から新しい特徴量を追加しました。")
                    st.rerun()
                except Exception as e:
                    st.error(f"日付の処理中にエラーが発生しました: {e}")

    # --- ダウンロード ---
    st.header("4. 完成したデータのダウンロード")
    csv = merged_df.to_csv(index=False).encode('utf--8')
    st.download_button(label="CSVとしてダウンロード", data=csv, file_name='engineered_data.csv', mime='text/csv')

else:
    st.info("サイドバーから2つのCSVファイルをアップロードすると開始できます。")